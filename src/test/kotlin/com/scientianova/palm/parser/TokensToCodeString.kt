package com.scientianova.palm.parser

import com.scientianova.palm.lexer.Token

fun Token.toCodeString() = when (this) {
    Token.LBrace -> "{"
    Token.RBrace -> "}"
    Token.LParen -> "("
    Token.RParen -> ")"
    Token.LBracket -> "["
    Token.RBracket -> "]"
    Token.Dot -> "."
    Token.RangeTo -> ".."
    Token.RangeFrom -> ".."
    Token.RangeUntil -> ".."
    Token.SafeAccess -> "?."
    Token.Colon -> ":"
    Token.DoubleColon -> "::"
    Token.Semicolon -> ";"
    Token.And -> "&&"
    Token.Or -> "||"
    Token.Less -> "<"
    Token.Greater -> ">"
    Token.LessOrEq -> "<="
    Token.GreaterOrEq -> ">="
    Token.Elvis -> "?:"
    Token.Plus -> "+"
    Token.Minus -> "-"
    Token.Times -> "*"
    Token.Div -> "/"
    Token.Rem -> "%"
    Token.Eq -> "=="
    Token.NotEq -> "!="
    Token.RefEq -> "=="
    Token.NotRefEq -> "!=="
    Token.Assign -> "="
    Token.PlusAssign -> "+="
    Token.MinusAssign -> "-="
    Token.TimesAssign -> "*="
    Token.DivAssign -> "/="
    Token.RemAssign -> "%="
    Token.QuestionMark -> "?"
    Token.NonNull -> "!!"
    Token.UnaryPlus -> "+"
    Token.UnaryMinus -> "-"
    Token.Not -> "!"
    Token.Arrow -> "->"
    Token.Spread -> "*"
    Token.Wildcard -> "_"
    Token.Comma -> ","
    Token.At -> "@"
    Token.Fun -> "fun"
    Token.Val -> "val"
    Token.Var -> "var"
    Token.Object -> "object"
    Token.This -> "this"
    Token.Super -> "super"
    Token.Null -> "null"
    Token.When -> "when"
    Token.If -> "if"
    Token.Else -> "else"
    Token.For -> "for"
    Token.While -> "while"
    Token.Do -> "do"
    Token.Loop -> "loop"
    Token.Break -> "break"
    Token.Continue -> "continue"
    Token.Return -> "return"
    Token.Throw -> "throw"
    Token.Guard -> "guard"
    Token.Using -> "using"
    Token.Nobreak -> "nobreak"
    Token.As -> "as"
    Token.EOL -> "EOL"
    Token.EOF -> "EOF"
    else -> this.identString().ifEmpty { toString() }
}