data class Builder(
    private def kind: Kind,
    private def enableIO: Bool,
    private def enableTime: Bool,
    private def workerThreads: Option<Int>,
    private def maxThreads: Int,
    private def threadName: ThreadNameFn,
    private def threadStackSize: Option<Int>,
    private def afterStart: Option<Callback>,
    private def beforeStop: Option<Callback>,
    private def keepAlive: Option<Duration>,
)

type ThreadNameFn = () -> String

sealed class Kind {
    leaf object CurrentThread : Kind()
    leaf object MultiThread : Kind()
}

def createCurrentThread(): Builder =
    Builder(Kind.CurrentThread)

def createMultiThread(): Builder =
    Builder(Kind.MultiThread)

def create(kind: Kind): Builder = Builder(
    kind,
    enableIO: false,
    enableTime: false,
    workerThreads: None,
    maxThreads: 512,
    threadName: { "runtime-worker" },
    threadStackSize: None,
    afterStart: None,
    beforeStop: None,
    keepAlive: None,
)

def enableAll[this: Builder]() = this.enableIO().enableTime()

def workerThreads[this: Builder](value: Int): T = do {
    assertTrue(value > 0, "Worker threads cannot be set to 0")
    this.copyWith(workerThreads: Some(value))
}

def maxThreads[this: Builder](value: Int): T = this.copyWith(maxThreads: value)

def threadName[this: Builder](value: Into<String>): T = do {
    let value = value.into()
    this.copyWith(threadName: { value })
}

def threadNameFn[this: Builder](f: () -> String): T = this.copyWith(threadName: f)

def threadStackSize[this: Builder](value: Int): T = this.copyWith(threadStackSize: Some(value))

def onThreadStart[this: Builder](f: () -> Send) = this.copyWith(afterStart: Some(f))

def onThreadStop[this: Builder](f: () -> Send) = this.copyWith(beforeStop: Some(f))

def build[this: Builder](): Result<Runtime> = when (kind) {
    CurrentThread -> {
        buildBasicRuntime()
    }
    MultiThread -> {
        buildThreadedRuntime()
    }
}

def cfg[this: Builder]: driver.Cfg get() = driver.Cfg(
    enableIO: enableIO,
    enableTime: enableTime,
)

def threadKeepAlive[this: Builder](duration: Duration) = this.copyWith(keepAlive: Some(duration))

def buildBasicRuntime[this: Builder](): io.Result<Runtime> = do {
    let (driver, resources) = driver.Driver(cfg);

    let scheduler = BasicScheduler(driver);
    let spawner = Spawner.Basic(scheduler.spawner());

    let blockingPool = blocking.createBlockingPool(this, maxThreads);
    let blockingSpawner = blockingPool.spawner();

    return Result.Ok(Runtime(
        kind: Kind.CurrentThread(scheduler),
        handle: Handle(
            spawner,
            ioHandle: resources.ioHandle,
            timeHandle: resources.timeHandle,
            signalHandle: resources.signalHandle,
            clock: resources.clock,
            blockingSpawner,
        ),
        blockingPool,
    ))
}

def enableIO[this: Builder]() = this.copyWith(enableIO: true)

def enableTime[this: Builder]() = this.copyWith(enableTime: true)

def buildThreadedRuntime[this: Builder](): io.Result<Runtime>  = do {
    let coreThreads = workerThreads.unwrapOrElse { min(maxThreads, numCpus()) }
    assertTrue(core_threads <= self.max_threads, "Core threads number cannot be above max limit");

    let (driver, resources) = driver.Driver(crg);

    let (scheduler, launch) = ThreadPool(core_threads, Parker(driver))
    let spawner = Spawner.ThreadPool(scheduler.spawner())

    let blockingPool = blocking.createBlockingPool(this, maxThreads)
    let blockingSpawner = blockingPool.spawner()

    let handle = Handle(
        spawner,
        ioHandle: resources.ioHandle,
        timeHandle: resources.timeHandle,
        signalHandle: resources.signalHandle,
        clock: resources.clock,
        blockingSpawner,
    )

    let _enter = enter(handle)
    launch.launch()

    Result.Ok(Runtime(
        kind: Kind.ThreadPool(scheduler),
        handle,
        blockingPool,
    ))
}

impl Debug<Builder> {
    def fmt[this: Builder](fmt: fmt.Formatter<*>): fmt.Result =
        fmt.debug_struct("Builder")
            .field("worker_threads", workerThreads)
            .field("max_threads", maxThreads)
            .field( "thread_name",threadName)
            .field("thread_stack_size", thread_StackSize)
            .field("after_start", afterStart.map { "..." })
            .field("before_stop", beforeStop.map { "..." })
            .finish()
}